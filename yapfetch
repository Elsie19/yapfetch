#!/usr/bin/env python

import platform
import os
from shutil import which
from pathlib import Path
from pathlib import PurePosixPath
from psutil import virtual_memory
import subprocess
from itertools import zip_longest

red = "\033[1;91m"
green = "\033[1;92m"
yellow = "\033[1;33m"
blue = "\033[1;93m"
magenta = "\033[1;35m"
cyan = "\033[1;36m"
bold = "\033[1m"
reset = "\033[0m"

def get_os():
    return platform.freedesktop_os_release()["ID"]

def get_kernel():
    return platform.release()

def get_hostname():
    return platform.node()

def get_shell():
    return os.environ["SHELL"].split("/")[-1]

def get_editor():
    return os.environ["EDITOR"]

def humanbytes(B):
    """Return the given bytes as a human friendly KB, MB, GB, or TB string."""
    B = float(B)
    KB = float(1024)
    MB = float(KB ** 2) # 1,048,576
    GB = float(KB ** 3) # 1,073,741,824
    TB = float(KB ** 4) # 1,099,511,627,776

    if B < KB:
        return '{0} {1}'.format(B,'Bytes' if 0 == B > 1 else 'Byte')
    elif KB <= B < MB:
        return '{0:.2f} KB'.format(B / KB)
    elif MB <= B < GB:
        return '{0:.2f} MB'.format(B / MB)
    elif GB <= B < TB:
        return '{0:.2f} GB'.format(B / GB)
    elif TB <= B:
        return '{0:.2f} TB'.format(B / TB)

def get_ram():
    """ http://downloadramdownloadramdownloadram.com """
    used = virtual_memory().used
    total = virtual_memory().total
    return humanbytes(used), humanbytes(total)

def get_packages():
    cmds = ('apt', 'pacman', 'pacstall', 'xbps-query')
    valid_cmds = []
    for i in cmds:
        if which(i):
            valid_cmds.append(i)
        else:
            continue
    subprocesses = {
        "apt": ["dpkg", "--list"],
        "pacman": ["pacman", "-Qq"],
        "pacstall": ["pacstall", "-L"],
        "xbps-query": ["xbps-query", "-l"],
    }
    packages = []
    for i in valid_cmds:
        packages.append([
            i,
            len(
                subprocess.run(
                    subprocesses.get(i, "oof"),
                    capture_output=True,
                ).stdout.splitlines()
            )
        ]
        )

    return ", ".join([f"{i[0]}: {i[1]}" for i in packages])

def get_strata():
    strata = []
    possible = []
    p = Path("/bedrock/strata")
    for child in p.iterdir():
        possible.append(child)
    for i in possible:
        if not Path.is_symlink(i) and i.name != "bedrock":
            strata.append(PurePosixPath(i).name)
    return strata

def get_uptime():
    return subprocess.run(["uptime", "-p"], capture_output=True).stdout.decode().strip()[3:]

def get_colors():
    return f"{bold}{red}███{green}███{yellow}███{blue}███{magenta}███{cyan}███{reset}"

pengoo = r"""
      .___.
     /     \
    | O _ O |
    /  \_/  \
  .' /     \ `.
 / _|       |_ \
(_/ |       | \_)
    \       /
   __\_>-<_/__
   ~;/     \;~
""".splitlines()

used, total = get_ram()
strata = ' '.join(get_strata())

side = f"""
{red}{reset} {get_hostname()}
{yellow}{reset} {get_os()}
{green}{reset} {get_shell()}
{blue}{reset} {get_editor()}
{cyan}{reset} {get_kernel()}
{magenta}{reset} {used} / {total}
{red}{reset} {get_packages()}
{yellow}{reset} {strata}
{green}{reset} {get_uptime()}
{blue}{reset} {get_colors()}
""".splitlines()

def header():
    return f"{bold}--------------------{reset}[{bold}{green}{reset}]{bold}--------------------{reset}"

print(header(), end='')

longest_pengoo_body_part = len(max(pengoo, key=len))
for pengoo_body_part, side_line in zip_longest(pengoo, side):
    padding = longest_pengoo_body_part - len(pengoo_body_part or "") + 2
    print(pengoo_body_part or "", f"{' ' * padding}{side_line or ''}")
